#pragma once
#include "misc_language.h"

#define BUILD_COMMIT_ID "@VERSION@"

#define PROJECT_MAJOR_VERSION "1"
#define PROJECT_MINOR_VERSION "1"
#define PROJECT_REVISION "2"
#define PROJECT_VERSION PROJECT_MAJOR_VERSION "." PROJECT_MINOR_VERSION "." PROJECT_REVISION

#define PROJECT_VERSION_BUILD_NO 67
#define PROJECT_VERSION_BUILD_NO_STR STRINGIFY_EXPAND(PROJECT_VERSION_BUILD_NO)
#define PROJECT_VERSION_LONG PROJECT_VERSION "." PROJECT_VERSION_BUILD_NO_STR "[" BUILD_COMMIT_ID "]"



inline bool check_remote_client_version(const std::string& client_ver)
{
  std::string v = client_ver.substr(0, client_ver.find('[')); // remove commit id
  v = v.substr(0, v.rfind('.')); // remove build number

  int v_major = 0, v_minor = 0, v_revision = 0;

  size_t dot_pos = v.find('.');
  if (dot_pos == std::string::npos || !epee::string_tools::string_to_num_fast(v.substr(0, dot_pos), v_major))
    return false;

  v = v.substr(dot_pos + 1);
  dot_pos = v.find('.');
  if (!epee::string_tools::string_to_num_fast(v.substr(0, dot_pos), v_minor))
    return false;

  if (dot_pos != std::string::npos)
  {
    // revision
    v = v.substr(dot_pos + 1);
    if (!epee::string_tools::string_to_num_fast(v, v_revision))
      return false;
  }

  // got v_major, v_minor, v_revision

  // allow 1.1.x and greater
  
  if (v_major < 1)
    return false;

  if (v_major == 1 && v_minor < 1)
    return false;

  return true;
}
